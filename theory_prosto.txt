1) Уровни OSI

OSI - Open System Interconnection - сетевая модель взаимодействия открытых систем

Сетевая модель OSI состоит из 7 уровней:
Отсчет принято начинать с нижнего уровня

7. прикладной уровень (application layer) - связь пользовательских приложений с сетью. Эти приложения это HTTP, SMTP, POP3, FTP, TFTP, Telnet и т.д.

6. Представительский уровень (presentation layer) - преобразует данные в соответствующий формат. Например, при пересылке фото протокол отправляет фото на нижний уровень (уровень представления) , где офто преобразуется в удобный вид данных, и при получении фото уровень Представления преобразует эти биты в полноценное фотою Так можно работать с фото , музыкой, кодировками (JPEG, GIF, PNG, ASCII, EBDIC, MPEG)

5. Сеансовый уровень (session layer) - организует сеанс связи между компьютерами. Например, аудио и видео конференции.

4. Транспортный уровень (transport layer) - обеспечивает надежность передачи данных от отправителя к получателю. Например, общение по веб-камере. Тут выделим UDP и TCP. UDP - user datagram protocol - передает данны ебез установления соединения, не подтверждает доставку данных и не делает повторы TCP - transmission control protocol - перед передачей устанавливает соединение. подтверждает доставку данных, при необходимости делает повтор, гарантирует целостность и правильную последовательность загружаемых  данных.

Т.е. для музыки, видео, конференций лучше UDP - т.е. без повторов и задержек, а для текста, программ, паролей - TCP - с подтверждением получения.

3. Сетевой уровень - network layer - определяет путь, по которому данные будут преданы. Например, утсройствами третьего уровня называют маршрутизаторы. 
IP - internet protocol. IP - адрес - логический адрес в сетию
На этом уровне много протоколов

2. Канальный уровень - data link layer - нужен для взаимодействия сетей на физическом уровне. MAC - адрес - физический адрес.
LLC - logical link control - для взаимодействия с верхним уровнем
MAC - media access control - для взаимодействия с нижним уровнем
PPP - point to point - протокол для связи компьютера напрямую

1. физический уровень - physical layer - непосредственно осуществляет передачу потока данных
Например, Bluetooth, Wi-fi, IRDA, медные провода

2) Принципы тестирования.

Есть семь принципов тестирования.
1. Исчерпывающее тестирование невозможно
2. Тестирование демонстрирует наличие ошибок, но не гарантирует их отсутствие
3. Парадокс пестицида - если проводить проверку одними и теми же тестами снова и снова, то о6ни перестанут находить новые баги
4. Ранее тестирование - чем раньше начинать тестирование, тем лучше
5. Большее количество багов содержит небольшое уоличество модулей
6. Тестирование зависит от контекста - нельзя новости и сайт банка тестировать одинаково
7. Заблуждение об отсутствии ошибок - нельзя найти все возможные дефекты

3) Техники тест дизайна.

 - тестирование классами эквивалентности - определенные классы допустимых значений (например, возраст). Надо сделать хотя бы один тест в каждом классе.

 - тестирование граничных значений - одним сз слабых мест является работа с пограничными значениями, то есть чуть выше границы, чуть ниже, граница тетсируются.

 - таблица принятия решений - таблица, описывающая бизнес-логику приложения. на ее основании делаются тест-кейсы.

 - попарное тестирование - метод парного тестирования - подавляющее большинство багов выявляется тестом, проверяющим один параметр либо два. Мы не тестируем все возможные сорчетания входных параметров, а составляем тестовые наборы так, чтоб хотя бы один сочетался с каждым значением тестируемого. Есть специальные ортогональные таблицы. 

 - доменный анализ - похоже на тестирование по классам и граничных значений. включает в себя зависимости меду переменными и поиск тех значений, что несут в себе больший риск.

- сценарий пользования - сценарий взаимодействия двух и боее участников. Пользователем может быть не только человек, но и система. в них всегда указана цель , которой надо достигнуть, и шаги, которые надо для этого воспроизвести.

4) Как поодобрать мобильные девайсы для тестирования.

Задача: создать универсальный набор устройств, который покроет максимальную выборку из комбинаций разных. 
Основны епараметры: - внешняя аналитика - поиск по сайтам с ориентацией на отзывы пользователей и экспертов
- внутренняя аналитика - либо те, на которые система чаще ловит ошибки, в зависимости от нашего продукта.
- тенденции на рынке - санкции, нововведения в устройствах, и так далее

также важно учитывать аудиторию нашу, кто именно наши пользователи и какие у них устройства. 
Также влияет:
- разрешение экранов
- локализация, география
- возраст приложения (новое - на самом распространенном)

5) Есть много браузеров, почему важно тестировать в разных браузерах?

один и тот же код и элемент дизайна может выглядеть и ветси себя по-разному в разных браузерах.
И чтоб все работало так, как задумано и находилось там, где нам надо, необходимо кроссбраузерное тестирование. 
Кроме того, в разных браузерах могут задейтсоваться разные протоколы, быть разные настройки безопасности. Это также влияет на работу нашего приложения.
Для такого тетсирования есть специальные инструменты.
